SELECT DATABASE();
use dw;

-- Verifying the MERGED_DATA table
SELECT MIN(ORDER_DATE), MAX(ORDER_DATE), COUNT(DISTINCT ORDER_DATE)
FROM MERGED_DATA;

-- Inserting data into SUPPLIERS dimension
INSERT IGNORE INTO SUPPLIERS (SUPPLIER_ID, SUPPLIER_NAME)
SELECT DISTINCT supplierID, supplierName
FROM MERGED_DATA
WHERE supplierID IS NOT NULL;

-- Inserting data into STORES dimension
INSERT IGNORE INTO STORES (STORE_ID, STORE_NAME)
SELECT DISTINCT storeID, storeName
FROM MERGED_DATA
WHERE storeID IS NOT NULL;

-- Inserting data into CUSTOMERS dimension
INSERT IGNORE INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, GENDER)
SELECT DISTINCT customerID, customer_name, gender
FROM MERGED_DATA
WHERE customerID IS NOT NULL;

-- Inserting data into PRODUCTS dimension
INSERT IGNORE INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE, SUPPLIER_ID)
SELECT DISTINCT productID, productName, productPrice, supplierID
FROM MERGED_DATA
WHERE productID IS NOT NULL;

-- Inserting data into DIM_DATE dimension
INSERT IGNORE INTO DIM_DATE (
    DATE_ID, FULL_DATE, DAY_OF_WEEK, DAY_OF_MONTH, MONTH, QUARTER, YEAR, IS_WEEKEND, SEASON, HALF_YEAR
)
SELECT DISTINCT 
    TO_DAYS(ORDER_DATE) AS DATE_ID,
    ORDER_DATE AS FULL_DATE,
    DAYNAME(ORDER_DATE) AS DAY_OF_WEEK,
    DAY(ORDER_DATE) AS DAY_OF_MONTH,
    MONTH(ORDER_DATE) AS MONTH,
    QUARTER(ORDER_DATE) AS QUARTER,
    YEAR(ORDER_DATE) AS YEAR,
    CASE WHEN DAYOFWEEK(ORDER_DATE) IN (1, 7) THEN TRUE ELSE FALSE END AS IS_WEEKEND,
    CASE 
        WHEN MONTH(ORDER_DATE) IN (12, 1, 2) THEN 'Winter'
        WHEN MONTH(ORDER_DATE) IN (3, 4, 5) THEN 'Spring'
        WHEN MONTH(ORDER_DATE) IN (6, 7, 8) THEN 'Summer'
        ELSE 'Fall'
    END AS SEASON,
    CASE WHEN MONTH(ORDER_DATE) <= 6 THEN 1 ELSE 2 END AS HALF_YEAR
FROM MERGED_DATA
WHERE ORDER_DATE IS NOT NULL;

-- Verifying date insertion
SELECT DISTINCT SEASON, MONTH, YEAR 
FROM DIM_DATE 
ORDER BY YEAR, MONTH;

-- Inserting data into FACT_TRANSACTIONS fact table
INSERT INTO FACT_TRANSACTIONS (
    ORDER_ID, DATE_ID, PRODUCT_ID, CUSTOMER_ID, STORE_ID, QUANTITY, SALE_AMOUNT
)
SELECT 
    m.ORDER_ID,
    TO_DAYS(m.ORDER_DATE) AS DATE_ID,
    m.productID,
    m.customerID,
    m.storeID,
    m.QUANTITY,
    m.SALE
FROM MERGED_DATA m
WHERE m.ORDER_ID IS NOT NULL
  AND m.ORDER_DATE IS NOT NULL
  AND m.QUANTITY > 0;

-- Verifying the insertion
SELECT COUNT(*) AS 'Total Transactions' FROM FACT_TRANSACTIONS;

